<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha.deployment.scenarios"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Deployment Scenarios</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <sect1 xml:id="sec.deploy.scenarios.default">
  <title>Default Scenario</title>

  <para>
   In the default scenario &productname; is deployed in such a way that its
   components have access (either direct or via proxy) to resources on the
   internet.
  </para>

  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="direct_connection.png" width="100%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="direct_connection.png" width="100%"/>
    </imageobject>
   </mediaobject>
  </informalfigure>
 </sect1>
 <sect1 xml:id="sec.deploy.scenarios.airgap">
  <title>Airgapped Deployment</title>
  <important>
   <title>Scope Of This Document</title>
   <para>
    This document focuses on providing mirrors for the resources provided by
    &suse; and required for basic &productname; functionality. If you require
    additional functionality, you can use these instructions as an example on
    how to provide additional mirrors.
   </para>
   <para>
    Providing a full set of mirroring instructions, for all usage scenarios, is
    beyond the scope of this document.
   </para>
  </important>
  <para>
   An airgapped deployment can not have any direct connection to the Internet
   or external networks.
  </para>
  <para>
   All data flowing into or out of the airgapped network must be transferred in
   a secure fashion.
  </para>
<!-- <screen>

  </screen> -->

  <sect2 xml:id="sec.deploy.scenarios.airgap.concepts">
   <title>Concepts</title>
   <sect3>
    <title>Network Separation</title>
    <para>
     For an airgapped scenario we assume a network separation into three logical
     parts.
    </para>
   <informalfigure>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="airgap.png" width="100%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="airgap.png" width="100%"/>
     </imageobject>
    </mediaobject>
   </informalfigure>
   <variablelist>
    <varlistentry>
     <term>Upstream</term>
     <listitem>
      <para>
       Outside the controlled network.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>External</term>
     <listitem>
      <para>
       Inside the controlled network, outside the airgapped network.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Internal</term>
     <listitem>
      <para>
       Inside the airgapped network.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    The following instructions will use these three terms to refer to parts of
    the infrastructure. For example: "internal mirror" refers to the mirroring
    server on the airgapped network. The terms <literal>airgapped</literal> and
    <literal>internal</literal> will be used interchangeably.
   </para>
  </sect3>
  <sect3>
   <title>Mirrored Resources</title>
   <para>
    In order to disconnect &productname; from the external network, we must
    provide ways for the components to retrieve data from alternative sources
    inside the internal (airgapped) network.
   </para>
   <para>
    You will need to create a mirror server inside the internal network; which
    acts as a replacement for the default sources.
   </para>
   <para>
    The three main sources that must be replaced are:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      &suse; &mos; RPM packages
     </para>
     <para>
      Provided by the &suse; package repositories
     </para>
    </listitem>
    <listitem>
     <para>
      Helm installation charts
     </para>
     <para>
      Provided by the &suse; helm chart repository
      (https://kubernetes-charts.suse.com/)
     </para>
    </listitem>
    <listitem>
     <para>
      Container images
     </para>
     <para>
      Provided by the &suse; container registry (https://registry.suse.com)
     </para>
    </listitem>
   </itemizedlist>
   <para>
    You will provide replacements for these resources on a dedicated server
    inside your internal (airgapped) network.
   </para>
   <para>
    The internal mirror must be updated with data retrieved from the original
    upstream sources; in a trusted and secure fashion. To achieve this, you will
    need an additional mirroring server outside of the airgapped network which
    acts as a first stage mirror and allows retrieving data from the internet.
   </para>
   <para>
    Updating of mirrors happens in three stages.
   </para>
   <orderedlist>
    <listitem>
     <para>
      Update the external mirror from upstream.
     </para>
    </listitem>
    <listitem>
     <para>
      Transfer the updated data onto a trusted storage device.
     </para>
    </listitem>
    <listitem>
     <para>
      Update the internal mirror from the trusted storage device.
     </para>
    </listitem>
   </orderedlist>
   <para>
    Once the replacement sources are in place, the key components are
    reconfigured to use the mirrors as their main sources.
   </para>
  </sect3>

  <sect3>
   <title>RPM Package Repository Mirroring</title>
   <para>
    Mirroring of the RPM repositories is handled by the
    <link xlink:href="https://www.suse.com/documentation/sles-15/book_rmt/data/book_rmt.html">&rmtool;</link>
    for &sls; 15. The tool provides functionality that mirrors the upstream
    &suse; package repositories on the local network. This is intended to
    minimize reliance on &suse; infrastructure for updating large volumes of
    machines. The airgapped deployment uses the same technology to provide the
    packages locally for the airgapped environment.
   </para>
   <para>
    &sls; bundles software packages in so called modules. You must enable all
    the default modules for &sle; and in addition the <literal>Containers</literal>
    module. All enabled modules need to be mirrored inside the airgapped network
    in order to provide the necessary software for other parts of this scenario.
   </para>
   <para>
    RMT will provide a repository server that holds the packages
    and related metadata for &mos;; to install them like from the upstream
    repository. Data is synchronized once a day to the external mirror
    automatically or can be forced via the CLI.
   </para>
   <para>
    You can copy this data to your trusted storage at any point
    and update the internal mirror.
   </para>
  </sect3>

   <sect3>
    <title>Helm Chart and Container Image Mirroring</title>
    <para>
     &productname; uses <link xlink:href="https://www.helm.sh/">Helm</link> as
     one method to install additional software on the cluster. The logic behind
     this relies on <literal>Charts</literal>, which are configuration files
     that tell &kube; how to deploy software and its dependencies. The actual
     software installed using this method is delivered as
     <literal>container images</literal>. The location of the container image
     is stored inside the Helm chart.
    </para>
    <para>
     Container images are provided by SUSE, Docker, and others on
     so called registries. The &suse; container registry is used to update the
     &productname; components.
    </para>
    <para>
     Helm charts are provided independently from container images and can be
     developed by any number of sources. Please make sure that you trust
     the origin of container images referenced in the helm charts.
    </para>
    <para>
     We provide <link xlink:href="https://github.com/openSUSE/helm-mirror">helm-mirror</link>
     to allow downloading all charts present in a chart repository in bulk and
     moreover to extract all container image URLs from the charts. You can then
     use <link xlink:href="https://github.com/containers/skopeo">skopeo</link>
     to download all the images from their respective registry. This approach
     vastly simplifies the task of copying charts and their related images.
    </para>
    <para>
     Once mirroring is configured, you will not have to modify Dockerfile(s) or
     Kubernetes manifests to use the mirrors. The requests are passed through
     the container engine which forwards them to the configured mirrors. For
     example: All images with a prefix <literal>registry.suse.com/</literal>
     will be automatically pulled from the configured (internal) mirror instead.
    </para>
    <para>
     For further information on registry mirror configuration, refer to
     <xref linkend="sec.admin.velum.registry" /> and
     <xref linkend="sec.admin.velum.mirror" />.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="sec.deploy.scenarios.airgap.requirements">
   <title>Requirements</title>
   <sect3 xml:id="sec.deploy.scenarios.airgap.requirements.machines">
    <title>Mirror Servers</title>
    <note>
     <title>Shared Mirror Server</title>
     <para>
      If you have multiple clusters or a very large amount of nodes accessing
      these mirrors, you should increase the sizing of CPU/RAM.
     </para>
     <para>
      Storage sizing depends on your intended update frequency and data
      retention model. If you want to keep snapshots or images of repository
      states at various points, you must increase storage size accordingly.
     </para>
    </note>
    <para>
     You will need to provide and maintain at least two machines in addition to
     your &productname; cluster. These mirror servers will reside on the
     external part of your network and the internal (airgapped) network
     respectively.
    </para>
    <para>
     <link xlink:href="https://www.suse.com/documentation/sles-15/book_quickstarts/data/art_sle_installquick.html">Set
     up two &sls; 15 machines</link> one on the internal network and one on
     the airgapped network.
    </para>
    <para>
     Make sure you have
     <link xlink:href="https://www.suse.com/documentation/sles-15/book_sles_docker/data/preparation.html">enabled
     the <filename>Containers</filename> module</link> on each server.
    </para>
    <variablelist>
     <varlistentry>
      <term>External</term>
      <listitem>
       <para>
        This machine will host the <literal>&rmtool;</literal> for RPM packages
        and the <literal>Docker registry</literal> for container
        images.
       </para>
       <itemizedlist>
        <listitem>
         <para>
          <literal>1</literal> Host machines for the mirror servers.
         </para>
         <itemizedlist>
          <listitem>
           <para>
            SLES 15
           </para>
          </listitem>
          <listitem>
           <para>
            2 (v)CPU
           </para>
          </listitem>
          <listitem>
           <para>
            8 GB RAM
           </para>
          </listitem>
          <listitem>
           <para>
            500 GB Storage
           </para>
          </listitem>
         </itemizedlist>
        </listitem>
       </itemizedlist>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Internal (Airgapped)</term>
      <listitem>
       <para>
        This machine will host the <literal>&rmtool;</literal> for RPM packages,
        and <literal>Docker registry</literal> for container images
        as well as a webserver hosting the <literal>Helm chart repository</literal>
        files.
       </para>
       <itemizedlist>
        <listitem>
         <para>
          <literal>1</literal> Host machines for the mirror servers.
         </para>
         <itemizedlist>
          <listitem>
           <para>
            SLES 15
           </para>
          </listitem>
          <listitem>
           <para>
            2 (v)CPU
           </para>
          </listitem>
          <listitem>
           <para>
            8 GB RAM
           </para>
          </listitem>
          <listitem>
           <para>
            500 GB Storage
           </para>
          </listitem>
         </itemizedlist>
        </listitem>
       </itemizedlist>
      </listitem>
     </varlistentry>
    </variablelist>
    <important>
     <title>Adjust Number Of Mirror Servers</title>
     <para>
      This scenario description does not contain any fallback contingencies for
      the mirror servers. Add additional mirror servers (behind a loadbalancer)
      if you require additional reliability/availability.
     </para>
    </important>
   </sect3>

   <sect3 xml:id="sec.deploy.scenarios.airgap.requirements.network">
    <title>Networking</title>
    <para>
     All members of the &productname; cluster must be able to communicate with
     the internal mirror server(s) within the airgapped network.
    </para>
    <para>
     Ports:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       80 HTTP - RMT Server and Helm chart repository mirror
      </para>
     </listitem>
     <listitem>
      <para>
       443 HTTPS - RMT Server and Helm chart repository mirror
      </para>
     </listitem>
     <listitem>
      <para>
       5000 HTTP - Docker registry
      </para>
     </listitem>
    </itemizedlist>
    <note>
     <title>Additional Port Configuration</title>
     <para>
      If you choose to add more Docker registries to your internal network,
      these must run on different ports than the standard registry running on
      <literal>5000</literal>.
     </para>
    </note>
   </sect3>

   <sect3 xml:id="sec.deploy.scenarios.airgap.requirements.storage">
    <title>Trusted Storage</title>
    <para>
     Transferring data from the external network mirror to the internal mirror
     can be performed in many ways. The most common way is portable storage (USB
     keys or external hard drives).
    </para>
    <para>
     Sizing of the storage is dependent on the number of data sources that need
     to be stored. Container images can easily measure several Gigabytes per
     item; although they are generally smaller for Kubernetes related
     applications. The overall size of any given RPM repository is at least tens
     of Gigabytes. For example: At the time of writing, the package repository
     for &sls; contains approximately <literal>36 GB</literal> of data.
    </para>
    <para>
     The storage must be formatted to a filesystem type supporting files larger
     than <literal>4 GB</literal>.
    </para>
    <para>
     The type of filesystem used for the storage depends on your requirements.
     We recommend <literal>btrfs</literal>.
    </para>
    <para>
     We recommend external storage with at least <literal>128GB</literal>.
    </para>
    <note>
     <title>Handling Of Trusted Storage</title>
     <para>
      Data integrity checks, duplication, backup, and secure handling procedures
      of trusted storage are beyond the scope of this document.
     </para>
    </note>
   </sect3>
  </sect2>

  <sect2 xml:id="sec.deploy.scenarios.airgap.rpm-repository">
   <title>RPM Repository Mirror</title>
   <sect3 xml:id="sec.deploy.scenarios.airgap.rpm-repository.mirror">
    <title>Mirror Configuration</title>
    <note>
     <title>If Possible, Deploy The Mirror Before &productname; Cluster Deployment</title>
     <para>
      The mirror on the airgapped network should be running and populated before
      deploying &productname;, this makes rolling out much easier; since you
      can configure the nodes during installation to use the correct internal
      mirror.
     </para>
     <para>
      If the cluster is deployed before the mirror is running, you must
      reconfigure all nodes manually.
     </para>
    </note>
    <para>
     Set up &rmtool; on the two mirror servers.
    </para>
    <para>
     <link xlink:href="https://www.suse.com/documentation/sles-15/book_rmt/data/cha_rmt_installation.html">Follow these instructions</link>
    </para>
    <procedure>
     <title>Configure The External Mirror</title>
     <step>
     <para>
      Connect the external mirror to &scc; as described in <link xlink:href="https://www.suse.com/documentation/sles-15/book_rmt/data/sec_rmt_mirroring_credentials.html">these instructions</link>.
     </para>
    </step>
    </procedure>

    <procedure>
     <title>Configure The Internal Mirror</title>
     <step>
      <para>
       You need to disable the automatic repository sync on the internal server.
       This will attempt to download information from &scc; which can not be
       reached from inside the airgapped network.
      </para>
      <screen>&prompt.root;systemctl disable rmt-server-sync.timer
      </screen>
     </step>
    </procedure>
    <para>
     Now you need to perform the update procedure to do an initial sync of data
     between the upstream sources and the external mirror and the external and
     internal mirrors. Refer to: <xref linkend="sec.deploy.scenarios.airgap.rpm-repository.update"/>.
    </para>
   </sect3>

   <sect3 xml:id="sec.deploy.scenarios.airgap.rpm-repository.client">
    <title>Client Configuration</title>
    <para>
     <link xlink:href="https://www.suse.com/documentation/sles-15/book_rmt/data/cha_rmt_client.html">Follow these instructions</link>
     to configure all CaaSP nodes to use the package repository mirror server in
     the airgapped network.
    </para>
    <para>

    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="sec.deploy.scenarios.airgap.rpm-repository.update">
   <title>Updating RPM Repository Mirror</title>
   <para>
    <link xlink:href="https://www.suse.com/documentation/sles-15/book_rmt/data/sec_rmt_mirroring_export_import.html">Follow these instructions</link>
    to update the external server, transfer the data to a storage device, and
    use that device to update the airgapped server.
   </para>
  </sect2>

  <sect2 xml:id="sec.deploy.scenarios.airgap.container-registry">
   <title>Container Registry Mirror</title>
   <note>
    <title>Mirroring Multiple Image Registries / Chart Repositories</title>
    <para>
     You can mirror images and charts from multiple registries in one shared
     internal registry. Do note, however, that you must manually resolve
     conflicts due to duplicate charts and container images.
    </para>
    <para>
     We highly recommend running separate helm chart and container registry
     mirrors for each source registry.
    </para>
   </note>

   <sect3 xml:id="sec.deploy.scenarios.airgap.container-registry.mirror">
    <title>Mirror Configuration</title>
    <para>
     The docker container registry is provided as a container image itself.
     You must download the registry container from SUSE and run it on the
     respective server.
    </para>
    <note>
     <title>Internal Registry Mirror Is Read Only</title>
     <para>
      For security reasons, the internal registry mirror is configured in
      <literal>read-only</literal> mode. Therefore, pushing container images to
      these mirrors will not be possible. They can only serve images that were
      previously pulled and cached by the external mirror and then uploaded to
      the internal mirror.
     </para>
     <para>
      If you need the ability to store modified container images, you will have
      to create a new registry that will hold these images. The steps needed
      to run your own full container image registry are not part of this
      document.
     </para>
      <para>
      For more information you can refer to:
      <link xlink:href="https://docs.docker.com/registry/">Docker Registry</link>.
     </para>
    </note>

    <procedure>
     <title>Set Up The External Mirror</title>
     <step>
      <para>
       SSH into the external mirror server.
      </para>
     </step>
     <step>
      <para>
       Install <filename>helm-mirror</filename> and <filename>skopeo</filename>.
      </para>
<screen>&prompt.root;zypper in helm-mirror skopeo
      </screen>
     </step>
     <step>
      <para>
       Pull the docker registry container image.
      </para>
<screen>&prompt.user;<command>docker pull registry.suse.com/sles12/registry:2.6.2</command>
   </screen>
     </step>
     <step>
      <para>
       Save the pulled image to a <literal>.tar</literal> file.
      </para>
<screen>&prompt.user;<command>docker save -o /tmp/registry.tar registry.suse.com/sles12/registry:2.6.2</command>
      </screen>
     </step>
     <step>
      <para>
       Connect the trusted storage to the external mirror. We will assume the
       device is mounted at <filename>/mnt/storage</filename>. Copy the
       registry image onto the storage.
      </para>
<screen>&prompt.user;<command>cp <replaceable>/tmp/registry.tar</replaceable> <replaceable>/mnt/storage/registry.tar</replaceable></command>
   </screen>
     </step>
     <step>
      <para>
       Create basic authentication credentials for registry. Replace
       <literal>USERNAME</literal> and <literal>PASSWORD</literal> with
       proper credentials of your choosing.
      </para>
<screen>&prompt.user;<command>mkdir auth</command>
&prompt.user;<command>docker run --entrypoint htpasswd sles12/registry:2.6.2 -Bbn <replaceable>USERNAME PASSWORD</replaceable> > auth/htpasswd</command>
 </screen>
     </step>
     <step>
      <para>
       Create the <filename>/etc/docker/registry/config.secure.yml</filename>
       configuration file for Docker registry.
      </para>
      <para>
       For more details on the configuration, refer to:
       <link xlink:href="https://docs.docker.com/registry/configuration/">Docker
       Registry: Configuration</link>
      </para>
      <para>
       Replace <filename>/certs/domain.crt</filename> and
       <filename>/certs/domain.key</filename> with the appropriate certificate
       files for your organization.
      </para>
<screen>
version: 0.1
log:
  fields:
    service: registry
auth:
  htpasswd:
    realm: basic-realm
    path: /auth/htpasswd
storage:
  cache:
    blobdescriptor: inmemory
  filesystem:
    rootdirectory: /var/lib/registry
http:
  addr: 0.0.0.0:5000
  headers:
    X-Content-Type-Options: [nosniff]
  tls:
    certificate: /certs/domain.crt
    key: /certs/domain.key
health:
  storagedriver:
    enabled: true
    interval: 10s
threshold: 3
</screen>
     </step>
     <step>
      <para>
       Start the docker service and enable it at boot time:
      </para>
<screen>&prompt.root;<command>systemctl enable --now docker.service</command>
         </screen>
     </step>
     <step>
      <para>
       Start the registry container.
      </para>
<screen>&prompt.user;<command>cd /etc/docker/registry</command>
&prompt.user;<command>docker run -d -p 5000:5000 --restart=always --name registry \
-v `pwd`<replaceable>/config.secure.yml</replaceable>:/etc/docker/registry/config.yml \
-v `pwd`/auth:/auth \
-v `pwd`/certs:/certs \
-v <replaceable>/registry</replaceable>:/var/lib/registry sles12/registry:2.6.2</command>
       </screen>
     </step>
    </procedure>

    <procedure>
     <title>Set Up Internal Mirror</title>
     <step>
      <para>
       Connect the trusted storage to the internal mirror. We will assume the
       device is mounted at <filename>/mnt/storage</filename>. Copy the registry
       container image to the internal mirror.
      </para>
<screen>&prompt.user;<command>cp /mnt/storage/registry.tar /etc/docker/registry/registry.tar</command>
   </screen>
     </step>
     <step>
      <para>
       Create the <filename>/etc/docker/registry/config.airgapped.yml</filename>
       configuration file for Docker registry.
      </para>
      <para>
       For more details on the configuration, refer to:
       <link xlink:href="https://docs.docker.com/registry/configuration/">Docker
       Registry: Configuration</link>
      </para>
      <para>
       Replace <filename>/certs/domain.crt</filename> and
       <filename>/certs/domain.key</filename> with the appropriate certificate
       files for your organization.
      </para>
<screen>
version: 0.1
log:
  fields:
    service: registry
storage:
  cache:
    blobdescriptor: inmemory
  filesystem:
    rootdirectory: /var/lib/registry
  maintenance:
    readonly:
      enabled: true
http:
  addr: 0.0.0.0:5000
  headers:
    X-Content-Type-Options: [nosniff]
  tls:
    certificate: /certs/domain.crt
    key: /certs/domain.key
health:
  storagedriver:
    enabled: true
    interval: 10s
threshold: 3
         </screen>
     </step>
     <step>
      <para>
       Start the docker service and enable it at boot time:
      </para>
<screen>&prompt.root;<command>systemctl enable --now docker.service</command>
         </screen>
     </step>
     <step>
      <para>
       Start the registry container.
      </para>
<screen>&prompt.user;<command>cd /etc/docker/registry</command>
&prompt.user;<command>docker run -d -p 5000:5000 --restart=always --name registry \
-v `pwd`<replaceable>/config.airgapped.yml</replaceable>:/etc/docker/registry/config.yml \
-v `pwd`/auth:/auth \
-v `pwd`/certs:/certs \
-v <replaceable>/registry</replaceable>:/var/lib/registry sles12/registry:2.6.2</command>
       </screen>
     </step>
    </procedure>

    <para>
     Now you should have the registries set up and listening on port
     <literal>5000</literal> on their respective servers.
    </para>
    <para>
     You must now perform the shared update procedure to populate the registry.
     Refer to: <xref linkend="sec.deploy.scenarios.airgap.update"/>.
    </para>
   </sect3>

   <sect3 xml:id="sec.deploy.scenarios.airgap.container-registry.clients">
    <title>Client Configuration</title>
    <para>
     Using the airgapped mirror works exactly like using a traditional
     on-premise mirror. You must configure the internal registry mirror in
     &dashboard;.
    </para>
    <procedure>
     <title>Configuring Registry Mirror</title>
     <step>
      <para>
       Log in to &dashboard; on the &productname; admin node.
      </para>
     </step>
     <step>
      <para>
       Navigate to <guimenu>Settings &rarr; Mirrors</guimenu> and create a
       definition for your internal registry mirror as described in
       <xref linkend="sec.admin.velum.mirror"/>.
      </para>
     </step>
    </procedure>
   </sect3>
  </sect2>

  <sect2 xml:id="sec.deploy.scenarios.airgap.helm-charts">
   <title>Helm Chart Repository Mirror</title>
   <para>
    The helm charts will require images available from a registry mirror. The
    following steps will aid you in mirroring all images required by the &suse;
    provided helm charts. To make use of the helm charts, you must complete
    <xref linkend="sec.deploy.scenarios.airgap.container-registry"/>.
   </para>
   <sect3>
    <title>Mirror Configuration</title>
    <para>
     You must have a working container image registry mirror in place inside
     the air gapped network. This can be any webserver capable of hosting static
     files. We recommend providing the webserver on your internal mirror server.
    </para>
    <procedure>
     <title>Setting Up Chart Repository Mirror</title>
     <step>
      <para>
       Install and configure a webserver (for example <link xlink:href="https://www.suse.com/documentation/sles-15/book_sle_admin/data/cha_apache2.html">Apache</link>)
       on your airgapped mirror server.
      </para>
     </step>
     <step>
      <para>
       SSH into your mirror server on the <literal>external</literal> network.
      </para>
     </step>
     <step>
      <para>
       Download all helm charts from the helm chart repository using
       <command>helm-mirror</command>.
      </para>
<screen>&prompt.user;helm-mirror https://kubernetes-charts.suse.com /chartserver/charts
      </screen>
     </step>
    </procedure>
   </sect3>
   <sect3>
    <title>Client Configuration</title>
    <para>
     Add the webserver as a repo to <command>helm</command> on the admin node.
     </para>
<screen>&prompt.user;<command>helm repo add SUSE-MIRROR <replaceable>&lt;internal-mirror.hostname&gt;</replaceable></command>
   </screen>
   </sect3>
  </sect2>

  <sect2 xml:id="sec.deploy.scenarios.airgap.update">
   <title>Updating Registry Mirror And Helm Charts</title>
   <note>
    <title>Live Update Of Registry</title>
    <para>
     There is no need to stop the Docker registry services while doing the
     backup and restore procedures. All changed images will be re-indexed
     automatically.
    </para>
   </note>
   <para>
    Helm charts and container images must be refreshed in the same procedure,
    otherwise charts might refer to image versions that are not mirrored or you
    are mirroring outdated image versions that cause the chart deployment to
    fail.
   </para>

   <procedure>
    <title>Pull Data From Upstream Sources</title>
    <step>
     <para>
      SSH into the mirror server on the external network.
     </para>
    </step>
    <step>
     <para>
     Download all charts from the repository to the filesystem
     (e.g. <filename>/tmp/charts</filename>).
     </para>
<screen>&prompt.user;<command>mkdir <replaceable>/tmp/charts</replaceable></command></screen>
<screen>&prompt.user;<command>cd <replaceable>/tmp/charts</replaceable></command></screen>
<screen>&prompt.user;<command>helm-mirror https://kubernetes-charts.suse.com <replaceable>/tmp/charts</replaceable></command></screen>
   </step>
   <step>
    <para>
     Translate the chart information into the <literal>skopeo</literal> format.
    </para>
<screen>&prompt.user;<command>mkdir <replaceable>/tmp/skopeodata</replaceable></command></screen>
<screen>&prompt.user;<command>helm-mirror inspect-images <replaceable>/tmp/charts</replaceable> -o skopeo --file-name <replaceable>sync.yaml</replaceable></command></screen>
   </step>
   <step>
    <para>
     Download all the referenced images using <command>skopeo</command>.
    </para>
<screen>&prompt.user;<command>cd /tmp/skopeodata/</command></screen>
<screen>&prompt.user;<command>skopeo sync --source-yaml <replaceable>sync.yaml</replaceable> dir:<replaceable>/tmp/skopeodata</replaceable></command></screen>
    <para>
     <command>skopeo</command> will automatically create a directory named
     after the hostname of the registry from which you are downloading the
     images. The final path will be something like <filename>/tmp/skopeodata/registry.suse.com/</filename>.
    </para>
   </step>
   <step>
    <para>
     Populate the local registry with the downloaded data.
    </para>
    <para>
     For <literal>--dest-creds</literal> you must use the credentials you
     created during <xref linkend="sec.deploy.scenarios.airgap.container-registry.mirror" />.
    </para>
<screen>&prompt.user;<command>skopeo sync --dest-creds <replaceable>USERNAME:PASSWORD</replaceable> \
dir:<replaceable>/tmp/skopeodata/registry.suse.com/</replaceable> <replaceable>docker://myregistry.local:5000</replaceable></command>
     </screen>
   </step>
   <step>
    <para>
     After the synchronization is done, you can remove the <filename>skopeodata</filename>
     directory.
    </para>
<screen>&prompt.user;<command>rm -rf /tmp/skopeodata</command></screen>
   </step>
   <step>
    <para>
     Replace the charts download URL in the index file for the charts
     repository and rename the file back to <filename>index.yaml</filename>.
    </para>
    <screen>
&prompt.user;<command>cd /tmp/charts</command>
</screen><screen>
&prompt.user;<command>sed -i -e 's/https:\/\/kubernetes-charts.suse.com/https:\/\/<replaceable>myregistry.local</replaceable>\/charts/g' \
downloaded-index.yaml</command>
</screen><screen>
&prompt.user;<command>mv downloaded-index.yaml index.yaml</command>
    </screen>
   </step>
  </procedure>

   <procedure>
    <title>Transfer Data To Secure Storage</title>
    <step>
     <para>
      Connect the trusted storage to the external mirror. We will assume the
      device is mounted at <filename>/mnt/storage</filename>.
     </para>
    </step>
    <step>
     <para>
      Transfer the container image data to the trusted storage. This will remove
      all files and directories that are no longer present on the external host
      from the trusted storage.
     </para>
<screen>&prompt.user;<command>rsync -aP /tmp/skopeodata/registry.suse.com/ <replaceable>/mnt/storage/container-images/</replaceable> --delete</command>
     </screen>
    </step>
    <step>
     <para>
      Transfer the helm chart data to the trusted storage.
     </para>
<screen>&prompt.user;<command>rsync -aP <replaceable>/tmp/charts/</replaceable> <replaceable>/mnt/storage/charts</replaceable> --delete</command>
     </screen>
    </step>
   </procedure>

   <procedure>
    <title>Update Internal Mirror</title>
    <step>
     <para>
      Connect the trusted storage to the internal mirror. We will assume the
      device is mounted at <filename>/mnt/storage</filename>.
     </para>
    </step>
    <step>
     <para>
      Transfer the container image data to the internal mirror. This will remove
      all files and directories that are no longer present on the trusted storage
      from the internal mirror. If you have added any images to the registry
      manually, please back up these first and restore after the sync from
      the trusted storage is done.
     </para>
     <para>
      The target directory must be the same directory you have configured during
      the setup of the container registry. Here <filename>/tmp/registry</filename>.
     </para>
<screen>&prompt.user;<command>rsync -aP <replaceable>/mnt/storage/container-images/</replaceable> <replaceable>/tmp/registry/</replaceable>  --delete</command>
     </screen>
    </step>
    <step>
     <para>
      Transfer the helm chart data to the internal mirror. This will remove
      all charts that do not exist on the trusted storage. If you have added
      any charts to the location manually, please back up these first and
      restore after the sync from the trusted storage is done.
     </para>
<screen>&prompt.user;<command>rsync -aP <replaceable>/mnt/storage/charts</replaceable> <replaceable>/tmp/charts/</replaceable> --delete</command>
     </screen>
    </step>
   </procedure>

   <procedure>
    <title>Refresh information on the &productname; cluster</title>
    <step>
     <para>
      Update the repository information on the machine on which you are using
      Helm to install software to the cluster.
     </para>
<screen>&prompt.user;<command>helm repo update</command>
      </screen>
    </step>
   </procedure>

   <para>
    You can now deploy additional software on your &productname;. Refer to:
    <xref linkend="sec.admin.software.install" />.
   </para>
  </sect2>

  <sect2 xml:id="sec.deploy.scenarios.airgap.caasp-deployment">
   <title>Deploying &productname;</title>
   <sect3>
    <title>Using the ISO</title>
    <para>
     From YaST register the node against the RMT server. This will ensure the
     final node zypper repositories are pointed against RMT, moreover all the
     available updates are going to be installed (-> no need to run a
     transactional-update right after the installation -> way faster).
    </para>
   </sect3>
   <sect3>
    <title>Using AutoYast</title>
    <para>
     Ensure the admin node is registered against RMT, that will ensure the
     nodes that are provisioned by AutoYaST are registered against RMT to have all
     the updates applied
    </para>
   </sect3>
   <sect3>
    <title>Using a prebuilt image (eg: KVM, Xen)</title>
    <para>
     The node has to be registered against RMT. This should be done in the same
     way as a regular SLE machine: via SUSEConnect.
    </para>
   </sect3>

   <sect3>
    <title>Existing unregistered running node</title>
    <para>
     Again, they should be using SUSEConnect.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="sec.deploy.scenarios.airgap.troubleshooting">
   <title>Troubleshooting</title>
   <sect3>
    <title>Skopeo Fails Because Of Self Signed Certificate</title>
    <para>
     If you are using a self-signed certificate for the registry you can use
     <literal>--dest-tls-verify=false</literal> to skip the integrity check.
    </para>
   </sect3>
  </sect2>
 </sect1>
</chapter>
